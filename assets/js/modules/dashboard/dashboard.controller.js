/**
 * SmartTrack - Contr√¥leur Dashboard
 * Orchestration du dashboard principal
 */

const DashboardController = (function() {
    let isInitialized = false;
    let refreshInterval = null;

    /**
     * Initialiser le contr√¥leur
     */
    async function init() {
        try {
            console.log('üéÆ Initialisation DashboardController...');
            
            // Initialiser la vue
            if (typeof DashboardView !== 'undefined') {
                DashboardView.init();
            }
            
            // √âcouter les √©v√©nements de navigation
            if (typeof EventBus !== 'undefined') {
                EventBus.on('route:dashboard', handleDashboardRoute);
                EventBus.on('route:home', handleDashboardRoute); // Alias pour home
                EventBus.on('app:initialized', handleAppInitialized);
                EventBus.on('app:visibility-changed', handleVisibilityChanged);
            }
            
            isInitialized = true;
            console.log('‚úì DashboardController initialis√©');
            
        } catch (error) {
            console.error('‚ùå Erreur initialisation DashboardController :', error);
            throw error;
        }
    }

    /**
     * G√©rer la route vers le dashboard
     */
    function handleDashboardRoute() {
        console.log('üìç Navigation vers Dashboard');
        renderDashboard();
    }

    /**
     * G√©rer l'initialisation de l'app
     */
    function handleAppInitialized() {
        console.log('üöÄ App initialis√©e - DashboardController pr√™t');
        
        // Afficher le dashboard par d√©faut
        renderDashboard();
    }

    /**
     * G√©rer les changements de visibilit√© de l'app
     */
    function handleVisibilityChanged(data) {
        if (data.isVisible) {
            // Rafra√Æchir les donn√©es quand l'app redevient visible
            refreshDashboardData();
            startAutoRefresh();
        } else {
            // Arr√™ter le rafra√Æchissement automatique
            stopAutoRefresh();
        }
    }

    /**
     * Rendre le dashboard
     */
    async function renderDashboard() {
        try {
            if (typeof DashboardView !== 'undefined') {
                await DashboardView.render();
                updateActiveNavigation('dashboard');
                startAutoRefresh();
            } else {
                console.error('‚ùå DashboardView non disponible');
                showFallbackScreen();
            }
        } catch (error) {
            console.error('‚ùå Erreur rendu dashboard :', error);
            showErrorScreen('Erreur lors du chargement du dashboard');
        }
    }

    /**
     * Rafra√Æchir les donn√©es du dashboard
     */
    async function refreshDashboardData() {
        try {
            console.log('üîÑ Rafra√Æchissement donn√©es dashboard...');
            
            // √âmettre un √©v√©nement pour indiquer le rafra√Æchissement
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('dashboard:refresh-started');
            }
            
            // Demander aux mod√®les de rafra√Æchir leurs donn√©es
            await Promise.all([
                refreshPlayerData(),
                refreshSessionData(),
                refreshAnalyticsData(),
                refreshProgramData()
            ]);
            
            // √âmettre un √©v√©nement pour indiquer la fin du rafra√Æchissement
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('dashboard:refresh-completed');
            }
            
            console.log('‚úì Donn√©es dashboard rafra√Æchies');
            
        } catch (error) {
            console.error('‚ùå Erreur rafra√Æchissement dashboard :', error);
            
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('dashboard:refresh-failed', { error: error.message });
            }
        }
    }

    /**
     * Rafra√Æchir les donn√©es du joueur
     */
    async function refreshPlayerData() {
        if (typeof GamificationModel !== 'undefined') {
            try {
                const playerData = await GamificationModel.getPlayerData();
                if (typeof EventBus !== 'undefined') {
                    EventBus.emit('gamification:player-updated', { player: playerData });
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Erreur rafra√Æchissement donn√©es joueur :', error);
            }
        }
    }

    /**
     * Rafra√Æchir les donn√©es de session
     */
    async function refreshSessionData() {
        if (typeof SessionsModel !== 'undefined') {
            try {
                const currentSession = await SessionsModel.getCurrentSession();
                if (typeof EventBus !== 'undefined') {
                    EventBus.emit('sessions:current-updated', { session: currentSession });
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Erreur rafra√Æchissement session :', error);
            }
        }
    }

    /**
     * Rafra√Æchir les donn√©es d'analytics
     */
    async function refreshAnalyticsData() {
        if (typeof AnalyticsModel !== 'undefined') {
            try {
                const analyticsData = await AnalyticsModel.getOverviewStats();
                if (typeof EventBus !== 'undefined') {
                    EventBus.emit('analytics:updated', { analytics: analyticsData });
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Erreur rafra√Æchissement analytics :', error);
            }
        }
    }

    /**
     * Rafra√Æchir les donn√©es de programme
     */
    async function refreshProgramData() {
        if (typeof ProgramsModel !== 'undefined') {
            try {
                const currentProgram = await ProgramsModel.getCurrentProgram();
                if (typeof EventBus !== 'undefined') {
                    EventBus.emit('programs:current-updated', { program: currentProgram });
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Erreur rafra√Æchissement programme :', error);
            }
        }
    }

    /**
     * D√©marrer le rafra√Æchissement automatique
     */
    function startAutoRefresh() {
        // Arr√™ter le rafra√Æchissement existant s'il y en a un
        stopAutoRefresh();
        
        // Rafra√Æchir toutes les 2 minutes
        refreshInterval = setInterval(refreshDashboardData, 120000);
        console.log('‚è∞ Auto-refresh dashboard d√©marr√©');
    }

    /**
     * Arr√™ter le rafra√Æchissement automatique
     */
    function stopAutoRefresh() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
            refreshInterval = null;
            console.log('‚è∞ Auto-refresh dashboard arr√™t√©');
        }
    }

    /**
     * Actions de navigation depuis le dashboard
     */
    async function navigateToExercises() {
        if (typeof Router !== 'undefined') {
            Router.navigate('exercises');
        }
    }

    async function navigateToPreparation() {
        if (typeof Router !== 'undefined') {
            Router.navigate('preparation');
        }
    }

    async function navigateToPrograms() {
        if (typeof Router !== 'undefined') {
            Router.navigate('programs');
        }
    }

    async function navigateToGamification() {
        if (typeof Router !== 'undefined') {
            Router.navigate('gamification');
        }
    }

    async function navigateToAnalytics() {
        if (typeof Router !== 'undefined') {
            Router.navigate('analytics');
        }
    }

    async function navigateToHistory() {
        if (typeof Router !== 'undefined') {
            Router.navigate('history');
        }
    }

    async function navigateToLiveSession() {
        if (typeof Router !== 'undefined') {
            Router.navigate('live-session');
        }
    }

    /**
     * Actions de session depuis le dashboard
     */
    async function startNewSession() {
        try {
            console.log('üéØ D√©marrage nouvelle session...');
            
            if (typeof SessionsModel !== 'undefined') {
                // Cr√©er une nouvelle session de pr√©paration
                const newSession = await SessionsModel.createSession({
                    name: `Session ${new Date().toLocaleDateString()}`,
                    type: 'custom'
                });
                
                console.log('‚úì Nouvelle session cr√©√©e :', newSession.id);
                
                // Naviguer vers la pr√©paration
                navigateToPreparation();
                
            } else {
                throw new Error('SessionsModel non disponible');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur d√©marrage session :', error);
            showError('Erreur lors de la cr√©ation de la session');
        }
    }

    async function continueCurrentSession() {
        try {
            console.log('‚öîÔ∏è Continuation session...');
            
            if (typeof SessionsModel !== 'undefined') {
                const currentSession = await SessionsModel.getCurrentSession();
                
                if (!currentSession) {
                    throw new Error('Aucune session active');
                }
                
                if (currentSession.status === 'preparation') {
                    // Si en pr√©paration, aller √† la pr√©paration
                    navigateToPreparation();
                } else {
                    // Sinon, aller √† la session live
                    navigateToLiveSession();
                }
                
            } else {
                throw new Error('SessionsModel non disponible');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur continuation session :', error);
            showError('Erreur lors de la continuation de la session');
        }
    }

    async function pauseCurrentSession() {
        try {
            console.log('‚è∏Ô∏è Pause session...');
            
            if (typeof SessionsModel !== 'undefined') {
                await SessionsModel.pauseCurrentSession();
                
                // Rafra√Æchir les donn√©es
                await refreshSessionData();
                
                if (typeof NotificationManager !== 'undefined') {
                    NotificationManager.info('Session mise en pause');
                }
                
            } else {
                throw new Error('SessionsModel non disponible');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur pause session :', error);
            showError('Erreur lors de la pause de la session');
        }
    }

    /**
     * Actions de programme depuis le dashboard
     */
    async function continueCurrentProgram() {
        try {
            console.log('üìö Continuation programme...');
            
            if (typeof ProgramsModel !== 'undefined') {
                const nextSession = await ProgramsModel.getNextSession();
                
                if (nextSession) {
                    // Cr√©er la session depuis le programme
                    await SessionsModel.createSessionFromProgram(nextSession);
                    navigateToPreparation();
                } else {
                    throw new Error('Aucune session suivante disponible');
                }
                
            } else {
                throw new Error('ProgramsModel non disponible');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur continuation programme :', error);
            showError('Erreur lors de la continuation du programme');
        }
    }

    async function pauseCurrentProgram() {
        try {
            console.log('‚è∏Ô∏è Pause programme...');
            
            if (typeof ProgramsModel !== 'undefined') {
                await ProgramsModel.pauseCurrentProgram();
                
                // Rafra√Æchir les donn√©es
                await refreshProgramData();
                
                if (typeof NotificationManager !== 'undefined') {
                    NotificationManager.info('Programme suspendu');
                }
                
            } else {
                throw new Error('ProgramsModel non disponible');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur pause programme :', error);
            showError('Erreur lors de la suspension du programme');
        }
    }

    /**
     * Ajouter un exercice √† la session courante
     */
    async function addExerciseToCurrentSession(exerciseId) {
        try {
            console.log('‚ûï Ajout exercice √† la session :', exerciseId);
            
            if (typeof SessionsModel !== 'undefined' && typeof ExercisesController !== 'undefined') {
                // Utiliser le contr√¥leur d'exercices pour ajouter √† la session
                await ExercisesController.addExerciseToSession(exerciseId);
                
                // Rafra√Æchir les donn√©es de session
                await refreshSessionData();
                
                if (typeof NotificationManager !== 'undefined') {
                    NotificationManager.success('Exercice ajout√© √† la session !');
                }
                
            } else {
                throw new Error('Modules requis non disponibles');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur ajout exercice :', error);
            showError('Erreur lors de l\'ajout de l\'exercice');
        }
    }

    /**
     * Obtenir les statistiques du dashboard
     */
    async function getDashboardStats() {
        try {
            const stats = {
                player: null,
                session: null,
                analytics: null,
                program: null
            };
            
            // Collecter les donn√©es de tous les mod√®les
            if (typeof GamificationModel !== 'undefined') {
                stats.player = await GamificationModel.getPlayerData();
            }
            
            if (typeof SessionsModel !== 'undefined') {
                stats.session = await SessionsModel.getCurrentSession();
            }
            
            if (typeof AnalyticsModel !== 'undefined') {
                stats.analytics = await AnalyticsModel.getOverviewStats();
            }
            
            if (typeof ProgramsModel !== 'undefined') {
                stats.program = await ProgramsModel.getCurrentProgram();
            }
            
            return stats;
            
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration stats dashboard :', error);
            return null;
        }
    }

    /**
     * Mettre √† jour la navigation active
     */
    function updateActiveNavigation(section) {
        try {
            // Retirer l'√©tat actif de tous les √©l√©ments de navigation
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Marquer l'√©l√©ment actuel comme actif
            const activeItem = document.querySelector(`[data-screen="${section}"]`);
            if (activeItem) {
                activeItem.classList.add('active');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur mise √† jour navigation :', error);
        }
    }

    /**
     * Afficher un √©cran de secours
     */
    function showFallbackScreen() {
        const container = document.getElementById('app-content');
        if (container) {
            container.innerHTML = `
                <div class="screen error-screen">
                    <div class="error-content">
                        <h2>‚ö†Ô∏è Dashboard non disponible</h2>
                        <p>Le module dashboard n'est pas encore charg√©.</p>
                        <button class="btn btn-primary" onclick="location.reload()">
                            Recharger l'application
                        </button>
                    </div>
                </div>
            `;
        }
    }

    /**
     * Afficher un √©cran d'erreur
     */
    function showErrorScreen(message) {
        const container = document.getElementById('app-content');
        if (container) {
            container.innerHTML = `
                <div class="screen error-screen">
                    <div class="error-content">
                        <h2>‚ùå Erreur Dashboard</h2>
                        <p>${message}</p>
                        <div class="error-actions">
                            <button class="btn btn-secondary" onclick="DashboardController.renderDashboard()">
                                R√©essayer
                            </button>
                            <button class="btn btn-primary" onclick="location.reload()">
                                Recharger
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    /**
     * Afficher une erreur
     */
    function showError(message) {
        if (typeof NotificationManager !== 'undefined') {
            NotificationManager.error(message);
        } else {
            alert(message);
        }
    }

    /**
     * Obtenir l'√©tat d'initialisation
     */
    function getInitializationStatus() {
        return {
            isInitialized,
            hasView: typeof DashboardView !== 'undefined',
            hasRefreshInterval: refreshInterval !== null
        };
    }

    /**
     * Nettoyer les ressources (appel√© lors de la navigation)
     */
    function cleanup() {
        stopAutoRefresh();
    }

    // Interface publique
    return {
        init,
        renderDashboard,
        refreshDashboardData,
        navigateToExercises,
        navigateToPreparation,
        navigateToPrograms,
        navigateToGamification,
        navigateToAnalytics,
        navigateToHistory,
        navigateToLiveSession,
        startNewSession,
        continueCurrentSession,
        pauseCurrentSession,
        continueCurrentProgram,
        pauseCurrentProgram,
        addExerciseToCurrentSession,
        getDashboardStats,
        getInitializationStatus,
        cleanup
    };
})();

// Export global
window.DashboardController = DashboardController;