/**
 * SmartTrack - Mod√®le Gamification
 * Gestion du syst√®me XP, niveaux, badges et d√©fis
 */

const GamificationModel = (function() {
    let playerData = null;
    let badges = [];
    let challenges = [];
    let isLoaded = false;

    // Configuration XP
    const XP_CONFIG = {
        BASE_SESSION: 50,           // XP de base par session termin√©e
        PER_EXERCISE: 10,           // XP par exercice compl√©t√©
        PER_SET: 5,                 // XP par set r√©alis√©
        STREAK_MULTIPLIER: 1.5,     // Multiplicateur pour s√©rie de jours
        PERFECT_SESSION: 100,       // Bonus session parfaite (tous sets compl√©t√©s)
        FIRST_SESSION_DAY: 25,      // Bonus premi√®re session du jour
        CHALLENGE_COMPLETED: 200,   // XP pour d√©fi compl√©t√©
        BADGE_UNLOCKED: 150        // XP pour nouveau badge
    };

    /**
     * Initialiser le mod√®le de gamification
     */
    async function init() {
        try {
            console.log('üéÆ Initialisation du mod√®le Gamification...');
            
            await loadPlayerData();
            await loadBadges();
            await loadChallenges();
            
            // √âcouter les √©v√©nements de sessions
            if (typeof EventBus !== 'undefined') {
                EventBus.on('sessions:finished', handleSessionCompleted);
                EventBus.on('sessions:set-completed', handleSetCompleted);
                EventBus.on('storage:saved', handleStorageUpdate);
            }
            
            // V√©rifier les d√©fis quotidiens/hebdomadaires
            await checkDailyChallenges();
            
            console.log(`‚úì Mod√®le Gamification initialis√© (Niveau ${playerData.level})`);
            
        } catch (error) {
            console.error('‚ùå Erreur initialisation mod√®le Gamification :', error);
            throw error;
        }
    }

    /**
     * Charger les donn√©es du joueur
     */
    async function loadPlayerData() {
        try {
            playerData = await Storage.get(STORAGE_KEYS.PLAYER_DATA);
            
            if (!playerData) {
                // Initialiser un nouveau joueur
                playerData = {
                    level: 1,
                    xp: 0,
                    totalXp: 0,
                    badges: [],
                    completedChallenges: [],
                    stats: {
                        totalSessions: 0,
                        totalExercises: 0,
                        totalSets: 0,
                        currentStreak: 0,
                        longestStreak: 0,
                        perfectSessions: 0
                    },
                    preferences: {
                        notifications: true,
                        achievements: true,
                        sounds: true
                    },
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };
                await savePlayerData();
            }
            
            isLoaded = true;
            return playerData;
            
        } catch (error) {
            console.error('‚ùå Erreur chargement donn√©es joueur :', error);
            // Donn√©es par d√©faut en cas d'erreur
            playerData = {
                level: 1,
                xp: 0,
                totalXp: 0,
                badges: [],
                completedChallenges: [],
                stats: { totalSessions: 0, totalExercises: 0, totalSets: 0, currentStreak: 0, longestStreak: 0, perfectSessions: 0 },
                preferences: { notifications: true, achievements: true, sounds: true },
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            return playerData;
        }
    }

    /**
     * Charger les badges disponibles
     */
    async function loadBadges() {
        try {
            const data = await Storage.get(STORAGE_KEYS.BADGES);
            badges = data || PREDEFINED_BADGES;
            return badges;
            
        } catch (error) {
            console.error('‚ùå Erreur chargement badges :', error);
            badges = PREDEFINED_BADGES;
            return badges;
        }
    }

    /**
     * Charger les d√©fis
     */
    async function loadChallenges() {
        try {
            const data = await Storage.get(STORAGE_KEYS.CHALLENGES);
            challenges = data || generateWeeklyChallenges();
            return challenges;
            
        } catch (error) {
            console.error('‚ùå Erreur chargement d√©fis :', error);
            challenges = generateWeeklyChallenges();
            return challenges;
        }
    }

    /**
     * Sauvegarder les donn√©es du joueur
     */
    async function savePlayerData() {
        try {
            playerData.updated_at = new Date().toISOString();
            await Storage.set(STORAGE_KEYS.PLAYER_DATA, playerData);
            
            // √âmettre √©v√©nement
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('gamification:player-updated', { player: playerData });
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur sauvegarde donn√©es joueur :', error);
            return false;
        }
    }

    /**
     * Ajouter de l'XP au joueur
     */
    async function addXP(amount, reason = 'Unknown') {
        try {
            if (!playerData || amount <= 0) return false;

            const oldLevel = playerData.level;
            const oldXp = playerData.xp;

            playerData.xp += amount;
            playerData.totalXp += amount;

            // V√©rifier mont√©e de niveau
            const newLevel = calculateLevel(playerData.totalXp);
            if (newLevel > oldLevel) {
                playerData.level = newLevel;
                await handleLevelUp(oldLevel, newLevel);
            }

            await savePlayerData();

            // √âmettre √©v√©nement XP gagn√©
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('gamification:xp-gained', {
                    amount,
                    reason,
                    oldXp,
                    newXp: playerData.xp,
                    levelUp: newLevel > oldLevel,
                    newLevel
                });
            }

            console.log(`üéÆ +${amount} XP (${reason}) - Total: ${playerData.totalXp} - Niveau: ${playerData.level}`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur ajout XP :', error);
            return false;
        }
    }

    /**
     * Calculer le niveau bas√© sur l'XP total
     */
    function calculateLevel(totalXp) {
        // Formule exponentielle : Level = floor(sqrt(totalXp / 100)) + 1
        return Math.floor(Math.sqrt(totalXp / 100)) + 1;
    }

    /**
     * Calculer l'XP requis pour le prochain niveau
     */
    function getXpForNextLevel(level = null) {
        const currentLevel = level || (playerData ? playerData.level : 1);
        const nextLevel = currentLevel + 1;
        return Math.pow(nextLevel - 1, 2) * 100;
    }

    /**
     * Calculer l'XP requis pour le niveau actuel
     */
    function getXpForCurrentLevel(level = null) {
        const currentLevel = level || (playerData ? playerData.level : 1);
        if (currentLevel <= 1) return 0;
        return Math.pow(currentLevel - 1, 2) * 100;
    }

    /**
     * Obtenir le progr√®s vers le prochain niveau
     */
    function getLevelProgress() {
        if (!playerData) return { current: 0, required: 100, percentage: 0 };

        const currentLevelXp = getXpForCurrentLevel();
        const nextLevelXp = getXpForNextLevel();
        const currentXp = playerData.totalXp - currentLevelXp;
        const requiredXp = nextLevelXp - currentLevelXp;

        return {
            current: currentXp,
            required: requiredXp,
            percentage: Math.round((currentXp / requiredXp) * 100)
        };
    }

    /**
     * G√©rer la mont√©e de niveau
     */
    async function handleLevelUp(oldLevel, newLevel) {
        try {
            console.log(`üéâ NIVEAU SUP√âRIEUR ! ${oldLevel} ‚Üí ${newLevel}`);

            // Ajouter XP bonus pour mont√©e de niveau
            playerData.totalXp += 50;

            // V√©rifier d√©blocage de badges
            await checkLevelBadges(newLevel);

            // √âmettre √©v√©nement mont√©e de niveau
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('gamification:level-up', {
                    oldLevel,
                    newLevel,
                    player: playerData
                });
            }

            // Notification si activ√©es
            if (playerData.preferences.notifications) {
                if (typeof NotificationManager !== 'undefined') {
                    NotificationManager.success(
                        `üéâ Niveau ${newLevel} atteint !`,
                        `F√©licitations ! Vous avez d√©bloqu√© le niveau ${newLevel}.`
                    );
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erreur mont√©e de niveau :', error);
        }
    }

    /**
     * D√©bloquer un badge
     */
    async function unlockBadge(badgeId) {
        try {
            if (!playerData || playerData.badges.includes(badgeId)) {
                return false; // Badge d√©j√† d√©bloqu√©
            }

            const badge = badges.find(b => b.id === badgeId);
            if (!badge) {
                console.warn(`‚ùå Badge ${badgeId} non trouv√©`);
                return false;
            }

            playerData.badges.push(badgeId);
            
            // Ajouter XP bonus
            await addXP(XP_CONFIG.BADGE_UNLOCKED, `Badge d√©bloqu√©: ${badge.name}`);

            console.log(`üèÜ Badge d√©bloqu√© : ${badge.name}`);

            // √âmettre √©v√©nement
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('gamification:badge-unlocked', {
                    badge,
                    player: playerData
                });
            }

            // Notification
            if (playerData.preferences.achievements && typeof NotificationManager !== 'undefined') {
                NotificationManager.success(
                    `üèÜ Badge d√©bloqu√© !`,
                    `${badge.name} - ${badge.description}`
                );
            }

            await savePlayerData();
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur d√©blocage badge :', error);
            return false;
        }
    }

    /**
     * V√©rifier les badges bas√©s sur le niveau
     */
    async function checkLevelBadges(level) {
        const levelBadges = [
            { level: 5, badgeId: 'novice' },
            { level: 10, badgeId: 'athlete' },
            { level: 20, badgeId: 'expert' },
            { level: 50, badgeId: 'legend' }
        ];

        for (const levelBadge of levelBadges) {
            if (level >= levelBadge.level) {
                await unlockBadge(levelBadge.badgeId);
            }
        }
    }

    /**
     * V√©rifier tous les badges apr√®s une session
     */
    async function checkAllBadges() {
        try {
            const stats = playerData.stats;

            // Badge premi√®re session
            if (stats.totalSessions === 1) {
                await unlockBadge('first_session');
            }

            // Badge s√©rie
            if (stats.currentStreak >= 7) {
                await unlockBadge('weekly_warrior');
            }
            if (stats.currentStreak >= 30) {
                await unlockBadge('monthly_master');
            }

            // Badge sessions parfaites
            if (stats.perfectSessions >= 10) {
                await unlockBadge('perfectionist');
            }

            // Badge volume
            if (stats.totalSets >= 1000) {
                await unlockBadge('thousand_sets');
            }

            // Badges sp√©ciaux bas√©s sur les exercices
            // TODO: Ajouter v√©rifications sp√©cialis√©es

        } catch (error) {
            console.error('‚ùå Erreur v√©rification badges :', error);
        }
    }

    /**
     * G√©rer la fin d'une session
     */
    async function handleSessionCompleted(data) {
        try {
            const session = data.session;
            if (!session || !playerData) return;

            // Calculer XP de base
            let xpGained = XP_CONFIG.BASE_SESSION;

            // XP par exercice
            xpGained += session.exercises.length * XP_CONFIG.PER_EXERCISE;

            // XP par set compl√©t√©
            let completedSets = 0;
            let totalSets = 0;
            session.exercises.forEach(exercise => {
                exercise.sets.forEach(set => {
                    totalSets++;
                    if (set.completed) {
                        completedSets++;
                        xpGained += XP_CONFIG.PER_SET;
                    }
                });
            });

            // Bonus session parfaite
            let isPerfectSession = false;
            if (completedSets === totalSets && totalSets > 0) {
                xpGained += XP_CONFIG.PERFECT_SESSION;
                isPerfectSession = true;
                playerData.stats.perfectSessions++;
            }

            // Bonus premi√®re session du jour
            const today = new Date().toDateString();
            const sessionDate = new Date(session.date).toDateString();
            if (sessionDate === today) {
                // V√©rifier si c'est la premi√®re aujourd'hui
                const sessionsToday = await SessionsModel.getByDateRange(
                    new Date(today),
                    new Date(today)
                );
                if (sessionsToday.length === 1) {
                    xpGained += XP_CONFIG.FIRST_SESSION_DAY;
                }
            }

            // Multiplicateur de s√©rie
            if (playerData.stats.currentStreak > 1) {
                xpGained = Math.round(xpGained * XP_CONFIG.STREAK_MULTIPLIER);
            }

            // Mettre √† jour les statistiques
            playerData.stats.totalSessions++;
            playerData.stats.totalExercises += session.exercises.length;
            playerData.stats.totalSets += completedSets;
            
            // Calculer la nouvelle s√©rie
            await updateStreak(session.date);

            // Ajouter l'XP
            await addXP(xpGained, 'Session termin√©e');

            // V√©rifier les badges
            await checkAllBadges();

            // V√©rifier les d√©fis
            await checkChallengeProgress();

            console.log(`üéÆ Session termin√©e: +${xpGained} XP (${isPerfectSession ? 'Parfaite!' : completedSets + '/' + totalSets + ' sets'})`);
            
        } catch (error) {
            console.error('‚ùå Erreur traitement session gamification :', error);
        }
    }

    /**
     * G√©rer la compl√©tion d'un set
     */
    async function handleSetCompleted(data) {
        try {
            // Pour l'instant, on ne donne pas d'XP imm√©diat pour les sets
            // L'XP est calcul√© √† la fin de la session
            
            // Mais on peut √©mettre des √©v√©nements pour l'UI
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('gamification:set-completed', data);
            }
            
        } catch (error) {
            console.error('‚ùå Erreur traitement set gamification :', error);
        }
    }

    /**
     * Mettre √† jour la s√©rie de jours cons√©cutifs
     */
    async function updateStreak(sessionDate) {
        try {
            // R√©cup√©rer toutes les sessions pour calculer la s√©rie
            const allSessions = await SessionsModel.getAll();
            
            // Grouper par jour
            const sessionDays = {};
            allSessions.forEach(session => {
                const day = new Date(session.date).toDateString();
                sessionDays[day] = true;
            });

            // Calculer la s√©rie actuelle
            let currentStreak = 0;
            const today = new Date();
            
            for (let i = 0; i < 365; i++) { // V√©rifier jusqu'√† 1 an
                const checkDate = new Date(today);
                checkDate.setDate(today.getDate() - i);
                const checkDay = checkDate.toDateString();
                
                if (sessionDays[checkDay]) {
                    currentStreak++;
                } else {
                    break;
                }
            }

            playerData.stats.currentStreak = currentStreak;
            if (currentStreak > playerData.stats.longestStreak) {
                playerData.stats.longestStreak = currentStreak;
            }

            await savePlayerData();
            
        } catch (error) {
            console.error('‚ùå Erreur calcul s√©rie :', error);
        }
    }

    /**
     * G√©n√©rer les d√©fis hebdomadaires
     */
    function generateWeeklyChallenges() {
        const weekStart = Utils.getStartOfWeek(new Date());
        
        return WEEKLY_CHALLENGES.map(challenge => ({
            ...challenge,
            id: Utils.generateId(),
            startDate: weekStart.toISOString(),
            endDate: new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            progress: 0,
            completed: false,
            claimed: false
        }));
    }

    /**
     * V√©rifier les d√©fis quotidiens
     */
    async function checkDailyChallenges() {
        try {
            const today = new Date().toDateString();
            const lastCheck = await Storage.get('last_challenge_check');
            
            if (lastCheck !== today) {
                // R√©initialiser les d√©fis quotidiens
                challenges.forEach(challenge => {
                    if (challenge.type === 'daily') {
                        challenge.progress = 0;
                        challenge.completed = false;
                        challenge.claimed = false;
                    }
                });

                // G√©n√©rer nouveaux d√©fis hebdomadaires si n√©cessaire
                const weekStart = Utils.getStartOfWeek(new Date()).toDateString();
                const currentWeekChallenges = challenges.filter(c => 
                    c.type === 'weekly' && 
                    new Date(c.startDate).toDateString() === weekStart
                );

                if (currentWeekChallenges.length === 0) {
                    const newWeeklyChallenges = generateWeeklyChallenges();
                    challenges = challenges.filter(c => c.type !== 'weekly').concat(newWeeklyChallenges);
                }

                await Storage.set(STORAGE_KEYS.CHALLENGES, challenges);
                await Storage.set('last_challenge_check', today);
            }
            
        } catch (error) {
            console.error('‚ùå Erreur v√©rification d√©fis quotidiens :', error);
        }
    }

    /**
     * V√©rifier le progr√®s des d√©fis
     */
    async function checkChallengeProgress() {
        try {
            // TODO: Impl√©menter la v√©rification des d√©fis
            // Bas√© sur les statistiques du joueur et les sessions r√©centes
            
        } catch (error) {
            console.error('‚ùå Erreur v√©rification progr√®s d√©fis :', error);
        }
    }

    /**
     * Obtenir les donn√©es du joueur
     */
    function getPlayerData() {
        return playerData ? { ...playerData } : null;
    }

    /**
     * Obtenir tous les badges
     */
    function getAllBadges() {
        return badges.map(badge => ({
            ...badge,
            unlocked: playerData ? playerData.badges.includes(badge.id) : false
        }));
    }

    /**
     * Obtenir les badges d√©bloqu√©s
     */
    function getUnlockedBadges() {
        if (!playerData) return [];
        return badges.filter(badge => playerData.badges.includes(badge.id));
    }

    /**
     * Obtenir les d√©fis actifs
     */
    function getActiveChallenges() {
        const now = new Date();
        return challenges.filter(challenge => {
            const endDate = new Date(challenge.endDate);
            return endDate > now && !challenge.completed;
        });
    }

    /**
     * Obtenir les d√©fis compl√©t√©s
     */
    function getCompletedChallenges() {
        return challenges.filter(challenge => challenge.completed);
    }

    /**
     * Obtenir les statistiques de gamification
     */
    function getGamificationStats() {
        if (!playerData) return null;

        return {
            player: playerData,
            levelProgress: getLevelProgress(),
            totalBadges: badges.length,
            unlockedBadges: playerData.badges.length,
            activeChallenges: getActiveChallenges().length,
            completedChallenges: getCompletedChallenges().length
        };
    }

    /**
     * R√©initialiser les donn√©es de gamification
     */
    async function resetPlayerData() {
        try {
            playerData = {
                level: 1,
                xp: 0,
                totalXp: 0,
                badges: [],
                completedChallenges: [],
                stats: { totalSessions: 0, totalExercises: 0, totalSets: 0, currentStreak: 0, longestStreak: 0, perfectSessions: 0 },
                preferences: { notifications: true, achievements: true, sounds: true },
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };

            await savePlayerData();
            
            // √âmettre √©v√©nement
            if (typeof EventBus !== 'undefined') {
                EventBus.emit('gamification:reset');
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erreur r√©initialisation gamification :', error);
            return false;
        }
    }

    /**
     * G√©rer les mises √† jour du stockage
     */
    function handleStorageUpdate(data) {
        if (data.key === STORAGE_KEYS.PLAYER_DATA) {
            console.log('üîÑ Mise √† jour donn√©es joueur d√©tect√©e');
            loadPlayerData();
        }
    }

    // Interface publique
    return {
        init,
        addXP,
        unlockBadge,
        getPlayerData,
        getAllBadges,
        getUnlockedBadges,
        getActiveChallenges,
        getCompletedChallenges,
        getGamificationStats,
        getLevelProgress,
        resetPlayerData,
        calculateLevel,
        getXpForNextLevel
    };
})();

// Export global
window.GamificationModel = GamificationModel;